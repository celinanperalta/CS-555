============================= test session starts ==============================
collecting ... collected 78 items

test/test_US01.py::test_invalid_birth PASSED                             [  1%]
test/test_US01.py::test_invalid_death PASSED                             [  2%]
test/test_US01.py::test_invalid_marriage PASSED                          [  3%]
test/test_US01.py::test_invalid_divorce PASSED                           [  5%]
test/test_US01.py::test_empty PASSED                                     [  6%]
test/test_US02.py::test_birth_before_marriage PASSED                     [  7%]
test/test_US02.py::test_valid_marriage PASSED                            [  8%]
test/test_US02.py::test_birth_no_marriage PASSED                         [ 10%]
test/test_US02.py::test_marriage_no_birth PASSED                         [ 11%]
test/test_US02.py::test_same_birth_same_marriage PASSED                  [ 12%]
test/test_US04.py::test_divorce_before_marriage PASSED                   [ 14%]
test/test_US04.py::test_divorce_no_marriage PASSED                       [ 15%]
test/test_US04.py::test_valid_divorce PASSED                             [ 16%]
test/test_US04.py::test_marriage_no_divorce PASSED                       [ 17%]
test/test_US04.py::test_empty PASSED                                     [ 19%]
test/test_US08.py::test_birth_before_marriage PASSED                     [ 20%]
test/test_US08.py::test_birth_after_9 PASSED                             [ 21%]
test/test_US08.py::test_birth_in_9 PASSED                                [ 23%]
test/test_US08.py::test_birth_after_marriage PASSED                      [ 24%]
test/test_US08.py::test2 PASSED                                          [ 25%]
test/test_US10.py::test_marriage_wife_minor PASSED                       [ 26%]
test/test_US10.py::test_marriage_husband_minor PASSED                    [ 28%]
test/test_US10.py::test_marriage_both_minor PASSED                       [ 29%]
test/test_US10.py::test_marriage_both_adult PASSED                       [ 30%]
test/test_US11.py::test_marriage_no_divorce PASSED                       [ 32%]
test/test_US11.py::test_marriage_with_divorce PASSED                     [ 33%]
test/test_US12.py::test_old_wife_one_kid PASSED                          [ 34%]
test/test_US12.py::test_old_husband_one_kid PASSED                       [ 35%]
test/test_US12.py::test_old_both_one_kid PASSED                          [ 37%]
test/test_US12.py::test_old_wife_both_kids PASSED                        [ 38%]
test/test_US12.py::test_old_husband_both_kids PASSED                     [ 39%]
test/test_US12.py::test_old_both_both_kids PASSED                        [ 41%]
test/test_US12.py::test_old_none PASSED                                  [ 42%]
test/test_US13.py::test_less_than_8 PASSED                               [ 43%]
test/test_US13.py::test_twins PASSED                                     [ 44%]
test/test_US14.py::test_more_than_five_births PASSED                     [ 46%]
test/test_US14.py::test_less_than_five_births PASSED                     [ 47%]
test/test_US14.py::test_five_births PASSED                               [ 48%]
test/test_US15.py::test_has_15 PASSED                                    [ 50%]
test/test_US16.py::test_all_same PASSED                                  [ 51%]
test/test_US16.py::test_married_women PASSED                             [ 52%]
test/test_US16.py::test_married_men_same PASSED                          [ 53%]
test/test_US16.py::test_different_son PASSED                             [ 55%]
test/test_US16.py::test_two_different_sons PASSED                        [ 56%]
test/test_US16.py::test_married_men_different PASSED                     [ 57%]
test/test_US17.py::test_descendant_marriage FAILED                       [ 58%]
test/test_US18.py::test_more_than_five_births FAILED                     [ 60%]
test/test_US19.py::test_US19 PASSED                                      [ 61%]
test/test_US20.py::test_US20 PASSED                                      [ 62%]
test/test_US21.py::test_wife_m PASSED                                    [ 64%]
test/test_US21.py::test_husband_f PASSED                                 [ 65%]
test/test_US21.py::test_wife_m_husband_f PASSED                          [ 66%]
test/test_US21.py::test_control PASSED                                   [ 67%]
test/test_US22.py::test_same_i_id FAILED                                 [ 69%]
test/test_US22.py::test_same_f_id FAILED                                 [ 70%]
test/test_US22.py::test_same_f_and_i_id FAILED                           [ 71%]
test/test_US22.py::test_control PASSED                                   [ 73%]
test/test_US23.py::test_same_name_and_birth FAILED                       [ 74%]
test/test_US23.py::test_same_name PASSED                                 [ 75%]
test/test_US23.py::test_same_birth PASSED                                [ 76%]
test/test_US23.py::test_control PASSED                                   [ 78%]
test/test_US24.py::test_same_names_and_date PASSED                       [ 79%]
test/test_US24.py::test_control PASSED                                   [ 80%]
test/test_US25.py::test_US25 PASSED                                      [ 82%]
test/test_US26.py::test_US26 FAILED                                      [ 83%]
test/test_US30.py::test_US30 PASSED                                      [ 84%]
test/test_US31.py::test_US31 FAILED                                      [ 85%]
test/test_US33.py::test_US33 PASSED                                      [ 87%]
test/test_US34.py::test_US34_husband_older PASSED                        [ 88%]
test/test_US34.py::test_US34_wife_older PASSED                           [ 89%]
test/test_US35.py::test_US35 FAILED                                      [ 91%]
test/test_US36.py::test_US36 FAILED                                      [ 92%]
test/test_US37.py::test_US37 PASSED                                      [ 93%]
test/test_US41.py::test_full_date PASSED                                 [ 94%]
test/test_US41.py::test_date_no_day PASSED                               [ 96%]
test/test_US41.py::test_date_no_day_no_month PASSED                      [ 97%]
test/test_US41.py::test_gedcom_date_1 PASSED                             [ 98%]
test/test_US41.py::test_gedcom_date_2 PASSED                             [100%]

=================================== FAILURES ===================================
___________________________ test_descendant_marriage ___________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126b2aa40>

    def test_descendant_marriage(capfd):
        i1 = Individual("I01", "A", "M", gedcom_date_to_datetime("1 JAN 2022"))
        i2 = Individual("I02", "A", "M", gedcom_date_to_datetime("1 AUG 2022"))
        i3 = Individual("I03", "A", "M", gedcom_date_to_datetime("2 AUG 2022"))
    
        family = Family("F01", i1, i2, [], None, None)
        family.set_children([i3])
    
        family2 = Family("F02", i1, i3, [], None, None)
    
        check_US17([family, family2])
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US17.format(i1, i3)
E       AssertionError: assert '' == 'Anomaly US17...stor A (I03).'
E         - Anomaly US17: A (I01) is married to descendant/ancestor A (I03).

test/test_US17.py:25: AssertionError
__________________________ test_more_than_five_births __________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126b8ec20>

    def test_more_than_five_births(capfd):
        mom = Individual("I01", datetime.datetime(1979, 10, 12) + datetime.timedelta(days=1))
        dad = Individual("I02", datetime.datetime(1977, 1, 12) + datetime.timedelta(days=1))
    
    
        sib1 = Individual("I03", datetime.datetime(2000, 6, 9) + datetime.timedelta(days=1))
        sib2 = Individual("I04", datetime.datetime(2005, 7, 11) + datetime.timedelta(days=1))
    
    
        obj = Family("F01", mom, dad, [], datetime.datetime(2001, 1, 2) + datetime.timedelta(days=1))
        obj.set_children([sib1, sib2])
    
        obj2 = Family("F02", sib1, sib2, datetime.datetime(2022, 1, 2) + datetime.timedelta(days=1))
    
>       sib1.set_fams(obj2)

test/test_US18.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <model.Individual object at 0x126b8e6e0>
fams = <model.Family object at 0x126b8e2f0>

    def set_fams(self, fams):
        self.fams.clear()
>       for x in fams:
E       TypeError: 'Family' object is not iterable

src/model.py:37: TypeError
________________________________ test_same_i_id ________________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126bb3a00>

    def test_same_i_id(capfd):
        wife1 = Individual("I01", "Jane Doe", "F", datetime.datetime.now())
        husband1 = Individual("I02", "Jack Doe", "M", datetime.datetime.now())
        wife2 = Individual("I01", "Jane Doe", "F", datetime.datetime.now())
        husband2 = Individual("I03", "Jack Doe", "M", datetime.datetime.now())
    
        family1 = Family("F01", husband1, wife1, [], datetime.datetime.now())
        family2 = Family("F02", husband2, wife2, [], datetime.datetime.now())
    
        families = [family1, family2]
        individuals = [wife1, husband1, wife2, husband2]
    
        check_US22(individuals, families)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US22.format(wife1.id,"individual")
E       AssertionError: assert 'Error US22: ...ue family id.' == 'Error US22: ...ndividual id.'
E         - Error US22: I01 is not a unique individual id.
E         ?                                  --------
E         + Error US22: I01 is not a unique family id.
E         ?                                 +++  +

test/test_US22.py:23: AssertionError
________________________________ test_same_f_id ________________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126b2bbb0>

    def test_same_f_id(capfd):
        wife1 = Individual("I01", "Jane Doe", "F", datetime.datetime.now())
        husband1 = Individual("I02", "Jack Doe", "M", datetime.datetime.now())
        wife2 = Individual("I03", "Jane Doe", "F", datetime.datetime.now())
        husband2 = Individual("I04", "Jack Doe", "M", datetime.datetime.now())
    
        family1 = Family("F01", husband1, wife1, [], datetime.datetime.now())
        family2 = Family("F01", husband2, wife2, [], datetime.datetime.now())
    
        families = [family1, family2]
        individuals = [wife1, husband1, wife2, husband2]
    
        check_US22(individuals, families)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US22.format(family1.id,"family")
E       AssertionError: assert 'Error US22: ...ndividual id.' == 'Error US22: ...ue family id.'
E         - Error US22: F01 is not a unique family id.
E         ?                                 ^ -- -
E         + Error US22: F01 is not a unique individual id.
E         ?                                 ^^^^^^^^

test/test_US22.py:40: AssertionError
_____________________________ test_same_f_and_i_id _____________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126bb2aa0>

    def test_same_f_and_i_id(capfd):
        wife1 = Individual("I01", "Jane Doe", "F", datetime.datetime.now())
        husband1 = Individual("I02", "Jack Doe", "M", datetime.datetime.now())
        wife2 = Individual("I01", "Jane Doe", "F", datetime.datetime.now())
        husband2 = Individual("I04", "Jack Doe", "M", datetime.datetime.now())
    
        family1 = Family("F01", husband1, wife1, [], datetime.datetime.now())
        family2 = Family("F01", husband2, wife2, [], datetime.datetime.now())
    
        families = [family1, family2]
        individuals = [wife1, husband1, wife2, husband2]
    
        check_US22(individuals, families)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US22.format(wife1.id,"individual") + '\n' + consts.MSG_US22.format(family1.id,"family")
E       AssertionError: assert 'Error US22: ...ue family id.' == 'Error US22: ...ue family id.'
E         - Error US22: I01 is not a unique individual id.
E         ?             ^
E         + Error US22: F01 is not a unique individual id.
E         ?             ^
E         - Error US22: F01 is not a unique family id.
E         ?             ^
E         + Error US22: I01 is not a unique family id....
E         
E         ...Full output truncated (2 lines hidden), use '-vv' to show

test/test_US22.py:57: AssertionError
___________________________ test_same_name_and_birth ___________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126c2f790>

    def test_same_name_and_birth(capfd):
        wife1 = Individual("I01", "Jane Doe", "F", gedcom_date_to_datetime("2 AUG 2022"))
        husband1 = Individual("I02", "Jane Doe", "M", gedcom_date_to_datetime("2 AUG 2022"))
    
        family1 = Family("F01", husband1, wife1, [], datetime.datetime.now())
    
        families = [family1]
        individuals = [wife1, husband1]
    
        check_US23(individuals)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US23.format(wife1.name,wife1.birth)
E       AssertionError: assert '' == 'Anomaly US23...02 00:00:00).'
E         - Anomaly US23: More than one individual with identical name and birthday (Jane Doe, 2022-08-02 00:00:00).

test/test_US23.py:20: AssertionError
__________________________________ test_US26 ___________________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126b8c070>

    def test_US26(capfd):
    
    
        i0 = Individual("I0", "Albert", "M", gedcom_date_to_datetime("2 JAN 2000"), None, [], [])
        i1 = Individual("I1", "Albert", "M", gedcom_date_to_datetime("1 JAN 2000"), None, [], [])
        i2 = Individual("I2", "Balbert", "M", gedcom_date_to_datetime("5 JAN 2000"), None, [], [])
        i3 = Individual("I3", "Balbert", "M", gedcom_date_to_datetime("3 JAN 2003"), None, [], [])
    
        family = Family("F01", None, None, [], None, None)
        family.set_children([i0, i1, i2])
    
        individuals = [i0, i1, i2, i3]
    
        for i in individuals:
            i.set_famc([family.id])
    
        check_US26([family], individuals)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US26.format(i3, "child", family)
E       AssertionError: assert 'Error US26: ...r family F01.' == 'Error US26: ...r family F01.'
E         - Error US26: Balbert (I3) has inconsistent records as a child for family F01.
E         + Error US26: Balbert (I3) has inconsistent records as a child for family F01.
E         ?                                                                             +
E         + Error US26: Balbert (I2) has inconsistent records as a child for family F01.
E         + Error US26: Albert (I1) has inconsistent records as a child for family F01.
E         + Error US26: Albert (I0) has inconsistent records as a child for family F01.
E         + Error US26: Albert (I0) has inconsistent records as a child for family F01....
E         
E         ...Full output truncated (3 lines hidden), use '-vv' to show

test/test_US26.py:28: AssertionError
__________________________________ test_US31 ___________________________________

    def test_US31():
    
        h = Individual("I4", "H", "M", birth=gedcom_date_to_datetime("1 JAN 1976"))
        w = Individual("I5", "W", "F", birth=gedcom_date_to_datetime("1 JAN 1977"))
    
        m = Individual("I6", "M", "P", birth=gedcom_date_to_datetime("1 JAN 1986"), fams = "F02")
        p = Individual("I7", "J", "W", birth=gedcom_date_to_datetime("1 JAN 1987"), fams = "F02")
    
        family = Family("F02", m, p, marriage_date=gedcom_date_to_datetime("1 FEB 2000"), divorce_date=gedcom_date_to_datetime("1 FEB 2008"))
    
        individuals = [h,w, m, p]
    
        couples = check_US31(individuals)
        #print(couples)
    
    
>       assert "I4" in couples
E       AssertionError: assert 'I4' in []

test/test_US31.py:26: AssertionError
__________________________________ test_US35 ___________________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126b8dcc0>

    def test_US35(capfd):
        person1 = Individual("I01", "Kristen Smiles", "F", birth=gedcom_date_to_datetime("12 OCT 2022"))
        person2 = Individual("I02", "Chris Smiles", "F", birth=gedcom_date_to_datetime("1 JAN 2001"))
    
        individuals = [person1, person2]
        check_US35(individuals)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US35.format(person1.name)
E       AssertionError: assert '' == 'Anomaly US35...past 30 days.'
E         - Anomaly US35: Kristen Smiles was just born in the past 30 days.

test/test_US35.py:18: AssertionError
__________________________________ test_US36 ___________________________________

capfd = <_pytest.capture.CaptureFixture object at 0x126b8f760>

    def test_US36(capfd):
        person1 = Individual("I01","Kristen Smiles", "F", death=gedcom_date_to_datetime("12 OCT 2022"))
        person2 = Individual("I02","Jacke Paul", "M", death=gedcom_date_to_datetime("12 OCT 2002"))
    
        individuals = [person1, person2]
    
        check_US36(individuals)
    
        out, err = capfd.readouterr()
>       assert out.strip() == consts.MSG_US36.format(person1.name)
E       AssertionError: assert '' == 'Anomaly US36...past 30 days.'
E         - Anomaly US36: Kristen Smiles passed away in the past 30 days.

test/test_US36.py:18: AssertionError
=========================== short test summary info ============================
FAILED test/test_US17.py::test_descendant_marriage - AssertionError: assert '...
FAILED test/test_US18.py::test_more_than_five_births - TypeError: 'Family' ob...
FAILED test/test_US22.py::test_same_i_id - AssertionError: assert 'Error US22...
FAILED test/test_US22.py::test_same_f_id - AssertionError: assert 'Error US22...
FAILED test/test_US22.py::test_same_f_and_i_id - AssertionError: assert 'Erro...
FAILED test/test_US23.py::test_same_name_and_birth - AssertionError: assert '...
FAILED test/test_US26.py::test_US26 - AssertionError: assert 'Error US26: ......
FAILED test/test_US31.py::test_US31 - AssertionError: assert 'I4' in []
FAILED test/test_US35.py::test_US35 - AssertionError: assert '' == 'Anomaly U...
FAILED test/test_US36.py::test_US36 - AssertionError: assert '' == 'Anomaly U...
======================== 10 failed, 68 passed in 0.89s =========================
